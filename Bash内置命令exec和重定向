shell的内建命令exec将并不启动新的shell，而是用要被执行命令替换当前的shell进程，并且将老进程的环境清理掉，而且exec命令后的其它命令将不再执行。 
因此，如果你在一个shell里面，执行exec ls那么，当列出了当前目录后，这个shell就自己退出了，因为这个shell进程已被替换为仅仅执行ls命令的一个进程，执行结束自然也就退出了。为了避免这个影响我们的使用，一般将exec命令放到一个shell脚本里面，用主脚本调用这个脚本，调用点处可以用bash a.sh，（a.sh就是存放该命令的脚本），这样会为a.sh建立一个sub shell去执行，当执行到exec后，该子脚本进程就被替换成了相应的exec的命令。 
source命令或者"."，不会为脚本新建shell，而只是将脚本包含的命令在当前shell执行。 
不过，要注意一个例外，当exec命令来对文件描述符操作的时候，就不会替换shell，而且操作完成后，还会继续执行接下来的命令。 

Bash内置命令exec可以替换当前程序而不需要启动一个新的进程，可以改变标准输入和输出而不需要启动一个新的子进程。
如果文件用exec打开，read命令就会把文件指针每次指向下一行直到文件的末尾，如果要重新从文件开始读取，则必须把文件关闭再重新打开。

1、替换当前shell，执行某个命令，命令终止，shell也就终止了
$exec ls

2、打开文件作为当前shell的标准输入
$exec <file_name

3、打开文件作为当前shell的标准输出
$exec >file_name

4、打开文件作为输入，并分配文件描述符
$exec 3<datafile

5、打开文件作为输出，并分配文件描述符
$exec 4>datafile

6、创建文件描述符fd4的拷贝fd5
$exec 5<&4

7、关闭文件描述符
$exec 3<&- //关闭输入文件描述符
$exec 4>&- //关闭输出文件描述符

注意: <&和重定向操作符>&、&>的区别

例子：

$exec 3>filex //打开文件filex并分配文件描述符3，作为输出
$who >& 3 //who命令的输出输出到filex
$date >& 3 //date命令的输出输出到filex
$exec 3>&- //关闭filex
$exec 3<filex //重新打开文件filex并分配文件描述符3，作为输入
$cat <& 3 //重定向cat命令的输入到文件描述符3，即文件filex
$exec 3<&- //关闭filex


